---
import { db, eq, Projects, Posts } from "astro:db";
import { getCldImageUrl } from "astro-cloudinary/helpers";
import Icon from "astro-iconify";
import DOMPurify from "isomorphic-dompurify";
import { actions } from "astro:actions";
import Layout from "@/layouts/Layout.astro";
import Footer from "@/components/Footer.astro";
import EditPostIfMine from "@/components/server-islands/EditPostIfMine.astro";
import PageViewCounter from "@/components/server-islands/PageViewCounter.astro";

// Get the project ID from the URL
const projectSlug = Astro.params.id;

if (!projectSlug) {
  return Astro.redirect("/");
}

const projects = await db.select().from(Projects).where(eq(Projects.slug, projectSlug)).limit(1);

if (!projects.length) {
  return Astro.redirect("/404");
}

let project = projects[0];

if (!project.isPublished) {
  return Astro.redirect("/404");
}

const logoImageUrl = getCldImageUrl({
  src: project?.logoImageId || "",
  width: 64,
  crop: "fill",
  format: "webp"
});

const youtubeVideoId = project?.youtubeVideoUrl?.split("v=")[1] as string | undefined;
const youtubeVideoUrl = new URL(`https://www.youtube.com/embed/${youtubeVideoId}`);
youtubeVideoUrl.searchParams.set("rel", "0");

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect(`/app/${projectSlug}`);
}

const posts = await db
  .select()
  .from(Posts)
  .where(eq(Posts.slug, slug || ""))
  .limit(1);

const post = posts[0];

// Extract text content from post.content
const contentText = post?.content
  ? DOMPurify.sanitize(post.content, { ALLOWED_TAGS: [] }).replace(/<[^>]*>?/g, "")
  : "";

const description = contentText.length > 150 ? contentText.slice(0, 150) + "..." : contentText;

const title = post?.title;

const ogImageUrl = `https://api.faith.tools/og?title=${encodeURIComponent(title)}&id=${encodeURIComponent(project.id + "-" + post?.slug)}`;

const result = Astro.getActionResult(actions.leads.createLead);

const rssUrl = new URL(`/api/posts/rss.xml?projectId=${project?.id}`, Astro.url);

// The browser should always check freshness
Astro.response.headers.set("cache-control", "public, max-age=0, must-revalidate");

// The CDN should cache for a year, but revalidate if the cache tag changes
Astro.response.headers.set("netlify-cdn-cache-control", "s-maxage=31536000");

// Tag the page with the post slug
Astro.response.headers.set("netlify-cache-tag", slug);
---

<Layout title={title} description={description} ogImageUrl={ogImageUrl}>
  <link
    slot="head"
    rel="alternate"
    type="application/rss+xml"
    title={`${title} â€¢ faith.tools kit`}
    href={rssUrl.toString()}
  />

  <div
    x-init={`
      toastErrorMessage = \`${result?.error?.message || ""}\`;
      toastMessage = \`${result?.data?.success ? "Successfully signed up for updates!" : ""}\`;
    `}
    x-data
    class="prose p-6 py-12 container mx-auto flex flex-col gap-12"
  >
    <dialog x-ref="getUpdatesModal" id="my_modal_2" class="modal">
      <div class="modal-box bg-white flex flex-col gap-6 p-6 max-w-md">
        <h2 class="text-2xl my-0 items-center w-full">
          <Icon pack="lucide" name="mail" class="w-8 h-8 inline-block mr-1 align-top" />
          <span>Get Updates</span>
        </h2>
        <form method="POST" class="flex flex-col gap-4 w-full" action={actions.leads.createLead}>
          <label class="form-control w-full">
            <div class="label">
              <span class="text-base label-text">What's your name?</span>
              <span class="text-xs label-text text-slate-500">Required</span>
            </div>
            <input
              type="text"
              name="name"
              class="input input-lg text-base bg-white rounded-lg input-bordered w-full"
              placeholder="Your name"
              required
            />
          </label>
          <label class="form-control w-full">
            <div class="label">
              <span class="text-base label-text">And, your email?</span>
              <span class="text-xs label-text text-slate-500">Required</span>
            </div>
            <input
              type="email"
              name="email"
              class="input input-lg text-base bg-white rounded-lg input-bordered w-full"
              placeholder="email@example.com"
              required
            />
          </label>
          <input type="hidden" name="projectId" value={project?.id} />
          <label class="form-control w-full">
            <div class="label">
              <span class="text-base label-text">First impression of {project?.title}?</span>
              <span class="text-xs label-text text-slate-500">Optional</span>
            </div>
            <textarea
              name="message"
              class="textarea textarea-lg text-base bg-white rounded-lg textarea-bordered w-full"
              placeholder="Optional"></textarea>
          </label>
          <div class="flex flex-col gap-4">
            <button class="btn btn-primary mt-4 w-full">Submit</button>
            <p class="text-center text-slate-500 text-sm py-0 my-0">
              By signing up, you're agreeing to receive updates on {project?.title} from the creator of the project.
            </p>
          </div>
        </form>
      </div>
      <form method="dialog" class="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>

    <main class="flex flex-col gap-6 w-full mb-12">
      <div class="relative w-full flex flex-col">
        <div
          class="absolute z-10 top-0 left-0 right-0 scale-[95%] !bg-slate-200 m-0 list-none p-4 py-1 pb-12 rounded-xl w-full shadow-sm flex flex-col gap-2"
        >
          <!-- daisyUI breadcrumbs -->
          <div class="not-prose breadcrumbs text-sm flex justify-center text-slate-800">
            <ul>
              <li>
                {
                  logoImageUrl ? (
                    <img src={logoImageUrl} alt="" class="m-0 mr-2 max-w-6 max-h-6 rounded-md shadow" />
                  ) : (
                    <div class="m-0 w-full h-full w-6 h-6"></div>
                  )
                }
                <a href={`/app/${projectSlug}`} class="flex items-center gap-2">
                  {project?.title}
                </a>
              </li>
              <li class="flex items-center gap-2">
                <Icon pack="lucide" name="feather" height={16} width={16} class="shrink-0" />
                Post
              </li>
            </ul>
          </div>
        </div>
        <div
          class="relative text-xl w-full relative translate-y-12 z-20 m-0 list-none p-6 rounded-2xl bg-white w-full shadow-[0_4px_20px_rgb(0,0,0,0.08)] flex flex-col gap-2"
        >
          <PageViewCounter url={Astro.url.pathname} server:defer className="absolute top-6 right-6" />
          <div class="flex items-baseline gap-3">
            <h1 class="text-2xl font-bold">
              {post?.title}
            </h1>
            <button
              @click={`navigator.clipboard.writeText(window.location.origin + \`/app/${project?.slug}/posts/${post?.slug}\`); alert('Copied to clipboard!');`}
              class="btn btn-sm btn-ghost btn-circle hover:bg-slate-100"
            >
              <Icon pack="lucide" name="share" height={20} width={20} class="shrink-0 text-slate-500" />
            </button>
            <EditPostIfMine 
              projectUserId={project?.userId} 
              postId={`${post?.id}`}
              server:defer
            />
          </div>
          <Fragment set:html={post?.content} />
          <button
            @click="$refs.getUpdatesModal.showModal()"
            class="shadow-none mt-4 btn btn-secondary w-fit bg-slate-100 border-slate-100 hover:bg-slate-200 hover:text-slate-900 hover:border-slate-300"
          >
            Get Updates
          </button>
        </div>
      </div>
    </main>

    <Footer />
  </div>
</Layout>

<script>
  import { actions } from "astro:actions";
  actions.pageView.updatePageView({ url: window.location.pathname });
</script>