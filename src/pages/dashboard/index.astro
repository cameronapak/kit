---
import "trix/dist/trix.css";
import { CldUploadWidget } from "astro-cloudinary";
import { getCldImageUrl } from "astro-cloudinary/helpers";
import { db, Projects, eq } from "astro:db";
import Header from "../../components/Header.astro";
import Layout from "../../layouts/Layout.astro";
import { actions } from "astro:actions";
import Icon from "astro-iconify";

if (!Astro.locals.auth().userId) {
  return Astro.redirect("/");
}

const user = await Astro.locals.currentUser();
const projects = await db
  .select()
  .from(Projects)
  .where(eq(Projects.userId, user?.id || ""))
  .limit(1);

let project = projects[0];

// If no project exists, create one
if (!project && user) {
  const formData = new FormData();
  formData.append("title", "My Project");
  formData.append("content", "");
  formData.append("userId", user.id);

  const { data, error } = await actions.projects.createProject(formData);

  if (error) {
    console.error("Failed to create project:", error);
  } else {
    project = data.project;
  }
}

const bannerImageUrl = getCldImageUrl({
  src: project?.bannerImageId || "",
  width: 1200,
  crop: "fill",
  format: "webp"
});

// Handle form submission result
const result = Astro.getActionResult(actions.projects.updateProject);
---

<Layout title="Dashboard">
  <div class="p-6 container mx-auto">
    <Header activeTab="page" />

    <main class="py-12 flex flex-col gap-6">
      <section class="w-full">
        <form method="POST" action={actions.projects.updateProject}>
          <div class="p-6 rounded-2xl bg-white w-full shadow flex flex-col gap-12">
            {
              result?.error && (
                <div role="alert" class="alert alert-error bg-red-100 border-red-200 text-red-900">
                  <Icon pack="lucide" name="x-circle" height={20} width={20} class="shrink-0" />
                  <span>{result.error.message || "An error occurred"}</span>
                </div>
              )
            }
            {
              result?.data?.success && (
                <div role="alert" class="alert alert-info bg-cyan-100 border-cyan-200 text-cyan-900">
                  <Icon pack="lucide" name="check-circle" height={20} width={20} class="shrink-0" />
                  <span>Project updated successfully!</span>
                </div>
              )
            }

            <input type="hidden" name="id" value={project?.id} />

            <div
              x-data={`{
                youtubeVideoUrl: '${project?.youtubeVideoUrl || ""}',
                shouldShowYouTubeVideoInput: false,
                validateYouTubeVideoUrl(url) {
                  if (url.includes("youtube.com") || url.includes("youtu.be") && url.includes("v=")) {
                    return true;
                  }

                  return false;
                },
                get youtubeVideoId() {
                  return this.youtubeVideoUrl.split("v=")[1];
                }
              }`}
            >
              <h2 class="text-slate-700">Banner</h2>
              <CldUploadWidget
                id="upload-banner"
                uploadPreset="ml_default"
                options={{
                  sources: ["local"],
                  multiple: false,
                  maxFiles: 1,
                  croppingAspectRatio: 16 / 9,
                  folder: user?.id || "default"
                }}
              >
                <button type="button" class="w-full" :class="youtubeVideoUrl ? 'hidden' : ''">
                  <img
                    id="bannerImageEl"
                    src={bannerImageUrl || "/assets/placeholder.svg"}
                    alt=""
                    class="my-0 rounded-xl border-2 border-slate-200 aspect-video object-cover object-center w-full"
                  />
                </button>
              </CldUploadWidget>
              <!-- YouTube Embed Iframe -->
              <div x-show="youtubeVideoUrl" x-cloak class="mb-2">
                <iframe
                  class="my-0 rounded-xl border-2 border-slate-200 aspect-video object-cover object-center w-full"
                  width="100%"
                  height="100%"
                  x-bind:src="'https://www.youtube.com/embed/' + youtubeVideoId"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen></iframe>
              </div>
              <input type="hidden" name="bannerImageId" id="bannerImageId" value={project?.bannerImageId || ""} />
              <input
                x-cloak
                x-show="shouldShowYouTubeVideoInput"
                class="input input-bordered w-full rounded-lg bg-white"
                x-bind:type="shouldShowYouTubeVideoInput ? 'text' : 'hidden'"
                name="youtubeVideoUrl"
                id="youtubeVideoUrl"
                placeholder="https://www.youtube.com/watch?v=dQw4w9WgXcQ"
                x-model="youtubeVideoUrl"
              />
              <button
                type="button"
                x-show="!shouldShowYouTubeVideoInput"
                class="mt-4 btn btn-sm btn-outline border-slate-200 hover:bg-slate-200 hover:text-slate-900 hover:border-slate-300 border-2 shadow-none"
                @click="shouldShowYouTubeVideoInput = true"
              >
                Or, paste a YouTube video URL
              </button>
            </div>

            <div>
              <h2 class="text-slate-700 !mb-0">Name of Project</h2>
              <p class="text-slate-500">This can be changed at any time.</p>
              <div x-data={`{ title: '${project?.title || ""}', maxLength: 100 }`}>
                <input
                  name="title"
                  x-model="title"
                  @input="title = $event.target.value.slice(0, maxLength)"
                  type="text"
                  class="input input-bordered w-full rounded-lg bg-white"
                  required
                  maxlength="100"
                />
                <p class="text-xs text-slate-500 mt-2 mb-0">
                  <span x-text="title.length"></span>/<span x-text="maxLength"></span> characters
                </p>
              </div>
            </div>

            <div>
              <h2 class="text-slate-700">Description</h2>
              <input id="x" value={project?.content || ""} type="hidden" name="content" />
              <trix-editor input="x"></trix-editor>
            </div>

            <div>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
          </div>
        </form>
      </section>
    </main>
  </div>
</Layout>

<script>
  // @ts-ignore - no types available
  import Trix from "trix";
  import { setupKeyboardNavigation } from "../../libs/utils";

  setupKeyboardNavigation();

  type UploadInfo = {
    id: string;
    batchId: string;
    asset_id: string;
    public_id: string;
    version: number;
    version_id: string;
    signature: string;
    width: number;
    height: number;
    format: string;
    resource_type: string;
    created_at: string;
    tags: string[];
    bytes: number;
    type: string;
    etag: string;
    placeholder: boolean;
    url: string;
    secure_url: string;
    asset_folder: string;
    display_name: string;
    existing: boolean;
    original_filename: string;
    path: string;
    thumbnail_url: string;
  };

  type UploadEvent = {
    event: string;
    info: UploadInfo;
    UploadWidget: Record<string, unknown>;
  };

  document.addEventListener("trix-file-accept", function (event) {
    event.preventDefault();
  });

  const widget = document.querySelector("#upload-banner");
  const bannerImageIdInput = document.querySelector("#bannerImageId") as HTMLInputElement;
  const bannerImageEl = document.querySelector("#bannerImageEl") as HTMLImageElement;
  if (widget) {
    widget.addEventListener("clduploadwidget:success", ((e: CustomEvent<UploadEvent>) => {
      // Save the public_id to the hidden input
      const publicId = e.detail.info.public_id;
      if (bannerImageIdInput) {
        bannerImageIdInput.value = publicId;
      }

      // Update the banner image
      if (bannerImageEl) {
        bannerImageEl.src = e.detail.info.url;
      }
    }) as EventListener);
  }
</script>
