---
import "trix/dist/trix.css";
import { CldUploadWidget } from "astro-cloudinary";
import { getCldImageUrl } from "astro-cloudinary/helpers";
import { db, Projects, eq } from "astro:db";
import { actions } from "astro:actions";
import Icon from "astro-iconify";
import Header from "../../components/Header.astro";
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";

if (!Astro.locals.auth().userId) {
  return Astro.redirect("/");
}

const user = await Astro.locals.currentUser();
const projects = await db
  .select()
  .from(Projects)
  .where(eq(Projects.userId, user?.id || ""))
  .limit(1);

let project = projects[0];

// If no project exists, create one
if (!project && user) {
  const uuid = crypto.randomUUID();
  const formData = new FormData();
  formData.append("title", "My Project");
  formData.append("content", "Write about your project...");
  formData.append("userId", user.id);
  formData.append("authors", user?.fullName || user?.firstName || "John Doe");
  formData.append("slug", uuid);

  const { data, error } = await Astro.callAction(actions.projects.createProject, formData);

  if (error) {
    console.error("Failed to create project:", error);
  } else {
    project = data.project;
  }
}

const bannerImageUrl = getCldImageUrl({
  src: project?.bannerImageId || "",
  width: 1200,
  crop: "fill",
  format: "webp"
});

// Handle form submission result
const result = Astro.getActionResult(actions.projects.updateProject);
---

<Layout title="Dashboard">
  <div class="prose p-6 container mx-auto">
    <Header activeTab="page" projectSlug={project?.slug} />

    <main class="py-12 flex flex-col gap-6">
      <section class="w-full">
        <form
          x-data={`{ 
            authors: '${project?.authors || ""}',
            projectId: '${project?.id || ""}',
            title: '${project?.title || ""}', 
            slug: '${project?.slug || ""}',
            maxLength: 100,
            get previewUrl() {
              return '/app/' + this.slug;
            },
          }`}
          method="POST"
          action={actions.projects.updateProject}
        >
          <div class="p-6 rounded-2xl bg-white w-full shadow flex flex-col gap-12">
            {
              result?.error && (
                <div class="toast toast-top toast-center">
                  <div role="alert" class="alert alert-error bg-red-100 border-red-200 text-red-900">
                    <Icon pack="lucide" name="x-circle" height={20} width={20} class="shrink-0" />
                    <span>{result.error.message || "An error occurred"}</span>
                  </div>
                </div>
              )
            }
            {
              result?.data?.success && (
                <div
                  x-data="{ show: true }"
                  x-show="show"
                  x-transition:enter="transition ease-out duration-300"
                  x-transition:enter-start="opacity-0 transform -translate-y-2"
                  x-transition:enter-end="opacity-100 transform translate-y-0"
                  x-transition:leave="transition ease-in duration-300"
                  x-transition:leave-start="opacity-100 transform translate-y-0"
                  x-transition:leave-end="opacity-0 transform -translate-y-2"
                  x-init="setTimeout(() => show = false, 5000)"
                  class="toast toast-top toast-center"
                >
                  <div role="alert" class="alert alert-info bg-cyan-100 border-cyan-200 text-cyan-900">
                    <Icon pack="lucide" name="check-circle" height={20} width={20} class="shrink-0" />
                    <span>Project updated successfully!</span>
                  </div>
                </div>
              )
            }

            <div>
              <h2 class="text-slate-700 !mb-0">Path</h2>
              <p class="text-slate-500 m-0">
                This is the path that will be used to access your project. It can be changed at any time, but use
                caution, as this will change the URL of your project.
              </p>
              <p class="text-sm m-0 my-4 text-slate-500 flex items-baseline gap-1">
                kit.faith.tools/app/<span class="inline-block badge text-slate-800 line-clamp-1" x-text="slug || '-'">
                  {project?.slug || "-"}
                </span>
              </p>
              <input
                name="slug"
                x-model="slug"
                value={project?.slug || ""}
                @input="slug = $event.target.value.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '')"
                type="text"
                class="input text-xl input-lg input-bordered w-full rounded-lg bg-white"
                required
                maxlength="100"
                placeholder="example-project-name"
              />
              <p class="text-xs text-slate-500 mt-2 mb-0">
                <span x-text="slug.length">{project?.slug?.length || 0}</span>/<span x-text="maxLength">100</span> characters
              </p>
            </div>

            <input type="hidden" name="id" value={project?.id} />

            <div
              x-data={`{
                youtubeVideoUrl: '${project?.youtubeVideoUrl || ""}',
                shouldShowYouTubeVideoInput: ${Boolean(project?.youtubeVideoUrl || false)},
                validateYouTubeVideoUrl(url) {
                  if (url.includes("youtube.com") || url.includes("youtu.be") && url.includes("v=")) {
                    return true;
                  }

                  return false;
                },
                get youtubeVideoId() {
                  return this.youtubeVideoUrl.split("v=")[1];
                }
              }`}
            >
              <h2 class="text-slate-700">Banner</h2>
              <CldUploadWidget
                id="upload-banner"
                uploadPreset="ml_default"
                options={{
                  sources: ["local"],
                  multiple: false,
                  maxFiles: 1,
                  croppingAspectRatio: 16 / 9,
                  folder: user?.id || "default"
                }}
              >
                <button type="button" class="w-full" :class="youtubeVideoUrl ? 'hidden' : ''">
                  <img
                    id="bannerImageEl"
                    src={bannerImageUrl || "/assets/placeholder.svg"}
                    alt=""
                    class="my-0 rounded-xl border-2 border-slate-200 aspect-video object-cover object-center w-full"
                  />
                </button>
              </CldUploadWidget>
              <!-- YouTube Embed Iframe -->
              <div x-show="youtubeVideoUrl" x-cloak class="mb-2">
                <iframe
                  class="my-0 rounded-xl border-2 border-slate-200 aspect-video object-cover object-center w-full"
                  width="100%"
                  height="100%"
                  x-bind:src="'https://www.youtube.com/embed/' + youtubeVideoId"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen></iframe>
              </div>
              <input type="hidden" name="bannerImageId" id="bannerImageId" value={project?.bannerImageId || ""} />

              <div x-collapse x-cloak x-show="shouldShowYouTubeVideoInput" class="mt-4 flex flex-col gap-2">
                <div class="grid grid-cols-[1fr_auto] gap-2 items-center">
                  <input
                    class="input input-bordered w-full rounded-lg bg-white"
                    x-bind:type="shouldShowYouTubeVideoInput ? 'text' : 'hidden'"
                    name="youtubeVideoUrl"
                    id="youtubeVideoUrl"
                    placeholder="https://www.youtube.com/watch?v=dQw4w9WgXcQ"
                    x-model="youtubeVideoUrl"
                  />
                  <button
                    type="button"
                    @click="youtubeVideoUrl = ''; shouldShowYouTubeVideoInput = false"
                    class="btn btn-md btn-ghost btn-circle"
                  >
                    <Icon pack="lucide" name="x" height={24} width={24} />
                  </button>
                </div>
                <p class="text-slate-500 text-sm mt-2">
                  Given the video is set, it will be used instead of your banner image.
                </p>
              </div>

              <button
                type="button"
                x-show="!shouldShowYouTubeVideoInput"
                class="mt-4 btn btn-sm btn-outline border-slate-200 hover:bg-slate-200 hover:text-slate-900 hover:border-slate-300 border-2 shadow-none"
                @click="shouldShowYouTubeVideoInput = true"
              >
                Or, paste a YouTube video URL
              </button>
            </div>

            <div>
              <h2 class="text-slate-700 !mb-0">Name of Project</h2>
              <p class="text-slate-500">This can be changed at any time.</p>
              <div>
                <input
                  name="title"
                  x-model="title"
                  @input="title = $event.target.value.slice(0, maxLength)"
                  type="text"
                  class="input text-xl input-lg input-bordered w-full rounded-lg bg-white"
                  required
                  maxlength="100"
                />
                <p class="text-xs text-slate-500 mt-2 mb-0">
                  <span x-text="title.length"></span>/<span x-text="maxLength"></span> characters
                </p>
              </div>
            </div>

            <div>
              <h2 class="text-slate-700 !mb-0">Author(s)</h2>
              <p class="text-slate-500">You can set this as yourself, a team, or a company.</p>
              <div>
                <input
                  name="authors"
                  x-model="authors"
                  type="text"
                  class="input text-xl input-lg input-bordered w-full rounded-lg bg-white"
                  required
                  maxlength="256"
                  placeholder="Jane Doe & John Doe"
                />
              </div>
            </div>

            <div>
              <h2 class="text-slate-700">Description</h2>
              <input id="x" value={project?.content || ""} type="hidden" name="content" />
              <trix-editor class="text-xl px-6 py-4" input="x"></trix-editor>
            </div>

            <div class="flex gap-2">
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
          </div>
        </form>
      </section>
    </main>

    <Footer />
  </div>
</Layout>

<script>
  // @ts-ignore - no types available
  import Trix from "trix";
  import { setupKeyboardNavigation } from "../../libs/utils";

  setupKeyboardNavigation();

  type UploadInfo = {
    id: string;
    batchId: string;
    asset_id: string;
    public_id: string;
    version: number;
    version_id: string;
    signature: string;
    width: number;
    height: number;
    format: string;
    resource_type: string;
    created_at: string;
    tags: string[];
    bytes: number;
    type: string;
    etag: string;
    placeholder: boolean;
    url: string;
    secure_url: string;
    asset_folder: string;
    display_name: string;
    existing: boolean;
    original_filename: string;
    path: string;
    thumbnail_url: string;
  };

  type UploadEvent = {
    event: string;
    info: UploadInfo;
    UploadWidget: Record<string, unknown>;
  };

  document.addEventListener("trix-file-accept", function (event) {
    event.preventDefault();
  });

  const widget = document.querySelector("#upload-banner");
  const bannerImageIdInput = document.querySelector("#bannerImageId") as HTMLInputElement;
  const bannerImageEl = document.querySelector("#bannerImageEl") as HTMLImageElement;
  if (widget) {
    widget.addEventListener("clduploadwidget:success", ((e: CustomEvent<UploadEvent>) => {
      // Save the public_id to the hidden input
      const publicId = e.detail.info.public_id;
      if (bannerImageIdInput) {
        bannerImageIdInput.value = publicId;
      }

      // Update the banner image
      if (bannerImageEl) {
        bannerImageEl.src = e.detail.info.url;
      }
    }) as EventListener);
  }
</script>
